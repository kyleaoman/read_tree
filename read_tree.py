# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_read_tree', [dirname(__file__)])
        except ImportError:
            import _read_tree
            return _read_tree
        if fp is not None:
            try:
                _mod = imp.load_module('_read_tree', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _read_tree = swig_import_helper()
    del swig_import_helper
else:
    import _read_tree
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def read_tree(filename):
    return _read_tree.read_tree(filename)
read_tree = _read_tree.read_tree

def delete_tree():
    return _read_tree.delete_tree()
delete_tree = _read_tree.delete_tree
class halo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, halo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, halo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scale"] = _read_tree.halo_scale_set
    __swig_getmethods__["scale"] = _read_tree.halo_scale_get
    if _newclass:
        scale = _swig_property(_read_tree.halo_scale_get, _read_tree.halo_scale_set)
    __swig_setmethods__["id"] = _read_tree.halo_id_set
    __swig_getmethods__["id"] = _read_tree.halo_id_get
    if _newclass:
        id = _swig_property(_read_tree.halo_id_get, _read_tree.halo_id_set)
    __swig_setmethods__["num_prog"] = _read_tree.halo_num_prog_set
    __swig_getmethods__["num_prog"] = _read_tree.halo_num_prog_get
    if _newclass:
        num_prog = _swig_property(_read_tree.halo_num_prog_get, _read_tree.halo_num_prog_set)
    __swig_setmethods__["phantom"] = _read_tree.halo_phantom_set
    __swig_getmethods__["phantom"] = _read_tree.halo_phantom_get
    if _newclass:
        phantom = _swig_property(_read_tree.halo_phantom_get, _read_tree.halo_phantom_set)
    __swig_setmethods__["pid"] = _read_tree.halo_pid_set
    __swig_getmethods__["pid"] = _read_tree.halo_pid_get
    if _newclass:
        pid = _swig_property(_read_tree.halo_pid_get, _read_tree.halo_pid_set)
    __swig_setmethods__["upid"] = _read_tree.halo_upid_set
    __swig_getmethods__["upid"] = _read_tree.halo_upid_get
    if _newclass:
        upid = _swig_property(_read_tree.halo_upid_get, _read_tree.halo_upid_set)
    __swig_setmethods__["mmp"] = _read_tree.halo_mmp_set
    __swig_getmethods__["mmp"] = _read_tree.halo_mmp_get
    if _newclass:
        mmp = _swig_property(_read_tree.halo_mmp_get, _read_tree.halo_mmp_set)
    __swig_setmethods__["desc"] = _read_tree.halo_desc_set
    __swig_getmethods__["desc"] = _read_tree.halo_desc_get
    if _newclass:
        desc = _swig_property(_read_tree.halo_desc_get, _read_tree.halo_desc_set)
    __swig_setmethods__["parent"] = _read_tree.halo_parent_set
    __swig_getmethods__["parent"] = _read_tree.halo_parent_get
    if _newclass:
        parent = _swig_property(_read_tree.halo_parent_get, _read_tree.halo_parent_set)
    __swig_setmethods__["uparent"] = _read_tree.halo_uparent_set
    __swig_getmethods__["uparent"] = _read_tree.halo_uparent_get
    if _newclass:
        uparent = _swig_property(_read_tree.halo_uparent_get, _read_tree.halo_uparent_set)
    __swig_setmethods__["prog"] = _read_tree.halo_prog_set
    __swig_getmethods__["prog"] = _read_tree.halo_prog_get
    if _newclass:
        prog = _swig_property(_read_tree.halo_prog_get, _read_tree.halo_prog_set)
    __swig_setmethods__["next_coprog"] = _read_tree.halo_next_coprog_set
    __swig_getmethods__["next_coprog"] = _read_tree.halo_next_coprog_get
    if _newclass:
        next_coprog = _swig_property(_read_tree.halo_next_coprog_get, _read_tree.halo_next_coprog_set)
    __swig_setmethods__["mvir"] = _read_tree.halo_mvir_set
    __swig_getmethods__["mvir"] = _read_tree.halo_mvir_get
    if _newclass:
        mvir = _swig_property(_read_tree.halo_mvir_get, _read_tree.halo_mvir_set)
    __swig_setmethods__["orig_mvir"] = _read_tree.halo_orig_mvir_set
    __swig_getmethods__["orig_mvir"] = _read_tree.halo_orig_mvir_get
    if _newclass:
        orig_mvir = _swig_property(_read_tree.halo_orig_mvir_get, _read_tree.halo_orig_mvir_set)
    __swig_setmethods__["rvir"] = _read_tree.halo_rvir_set
    __swig_getmethods__["rvir"] = _read_tree.halo_rvir_get
    if _newclass:
        rvir = _swig_property(_read_tree.halo_rvir_get, _read_tree.halo_rvir_set)
    __swig_setmethods__["rs"] = _read_tree.halo_rs_set
    __swig_getmethods__["rs"] = _read_tree.halo_rs_get
    if _newclass:
        rs = _swig_property(_read_tree.halo_rs_get, _read_tree.halo_rs_set)
    __swig_setmethods__["vrms"] = _read_tree.halo_vrms_set
    __swig_getmethods__["vrms"] = _read_tree.halo_vrms_get
    if _newclass:
        vrms = _swig_property(_read_tree.halo_vrms_get, _read_tree.halo_vrms_set)
    __swig_setmethods__["scale_of_last_MM"] = _read_tree.halo_scale_of_last_MM_set
    __swig_getmethods__["scale_of_last_MM"] = _read_tree.halo_scale_of_last_MM_get
    if _newclass:
        scale_of_last_MM = _swig_property(_read_tree.halo_scale_of_last_MM_get, _read_tree.halo_scale_of_last_MM_set)
    __swig_setmethods__["vmax"] = _read_tree.halo_vmax_set
    __swig_getmethods__["vmax"] = _read_tree.halo_vmax_get
    if _newclass:
        vmax = _swig_property(_read_tree.halo_vmax_get, _read_tree.halo_vmax_set)
    __swig_setmethods__["pos"] = _read_tree.halo_pos_set
    __swig_getmethods__["pos"] = _read_tree.halo_pos_get
    if _newclass:
        pos = _swig_property(_read_tree.halo_pos_get, _read_tree.halo_pos_set)
    __swig_setmethods__["vel"] = _read_tree.halo_vel_set
    __swig_getmethods__["vel"] = _read_tree.halo_vel_get
    if _newclass:
        vel = _swig_property(_read_tree.halo_vel_get, _read_tree.halo_vel_set)

    def __init__(self):
        this = _read_tree.new_halo()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _read_tree.delete_halo
    __del__ = lambda self: None
halo_swigregister = _read_tree.halo_swigregister
halo_swigregister(halo)

class halo_index_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, halo_index_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, halo_index_key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _read_tree.halo_index_key_id_set
    __swig_getmethods__["id"] = _read_tree.halo_index_key_id_get
    if _newclass:
        id = _swig_property(_read_tree.halo_index_key_id_get, _read_tree.halo_index_key_id_set)
    __swig_setmethods__["index"] = _read_tree.halo_index_key_index_set
    __swig_getmethods__["index"] = _read_tree.halo_index_key_index_get
    if _newclass:
        index = _swig_property(_read_tree.halo_index_key_index_get, _read_tree.halo_index_key_index_set)

    def __init__(self):
        this = _read_tree.new_halo_index_key()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _read_tree.delete_halo_index_key
    __del__ = lambda self: None
halo_index_key_swigregister = _read_tree.halo_index_key_swigregister
halo_index_key_swigregister(halo_index_key)

class halo_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, halo_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, halo_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["halos"] = _read_tree.halo_list_halos_set
    __swig_getmethods__["halos"] = _read_tree.halo_list_halos_get
    if _newclass:
        halos = _swig_property(_read_tree.halo_list_halos_get, _read_tree.halo_list_halos_set)
    __swig_setmethods__["num_halos"] = _read_tree.halo_list_num_halos_set
    __swig_getmethods__["num_halos"] = _read_tree.halo_list_num_halos_get
    if _newclass:
        num_halos = _swig_property(_read_tree.halo_list_num_halos_get, _read_tree.halo_list_num_halos_set)
    __swig_setmethods__["scale"] = _read_tree.halo_list_scale_set
    __swig_getmethods__["scale"] = _read_tree.halo_list_scale_get
    if _newclass:
        scale = _swig_property(_read_tree.halo_list_scale_get, _read_tree.halo_list_scale_set)
    __swig_setmethods__["halo_lookup"] = _read_tree.halo_list_halo_lookup_set
    __swig_getmethods__["halo_lookup"] = _read_tree.halo_list_halo_lookup_get
    if _newclass:
        halo_lookup = _swig_property(_read_tree.halo_list_halo_lookup_get, _read_tree.halo_list_halo_lookup_set)

    def get_halo(self, index):
        return _read_tree.halo_list_get_halo(self, index)

    def __init__(self):
        this = _read_tree.new_halo_list()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _read_tree.delete_halo_list
    __del__ = lambda self: None
halo_list_swigregister = _read_tree.halo_list_swigregister
halo_list_swigregister(halo_list)

class halotree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, halotree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, halotree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["halo_lists"] = _read_tree.halotree_halo_lists_set
    __swig_getmethods__["halo_lists"] = _read_tree.halotree_halo_lists_get
    if _newclass:
        halo_lists = _swig_property(_read_tree.halotree_halo_lists_get, _read_tree.halotree_halo_lists_set)
    __swig_setmethods__["num_lists"] = _read_tree.halotree_num_lists_set
    __swig_getmethods__["num_lists"] = _read_tree.halotree_num_lists_get
    if _newclass:
        num_lists = _swig_property(_read_tree.halotree_num_lists_get, _read_tree.halotree_num_lists_set)
    __swig_setmethods__["scale_factor_conv"] = _read_tree.halotree_scale_factor_conv_set
    __swig_getmethods__["scale_factor_conv"] = _read_tree.halotree_scale_factor_conv_get
    if _newclass:
        scale_factor_conv = _swig_property(_read_tree.halotree_scale_factor_conv_get, _read_tree.halotree_scale_factor_conv_set)
    __swig_setmethods__["num_scales"] = _read_tree.halotree_num_scales_set
    __swig_getmethods__["num_scales"] = _read_tree.halotree_num_scales_get
    if _newclass:
        num_scales = _swig_property(_read_tree.halotree_num_scales_get, _read_tree.halotree_num_scales_set)

    def get_halo_list(self, index):
        return _read_tree.halotree_get_halo_list(self, index)

    def get_scale_factor_conv(self, index):
        return _read_tree.halotree_get_scale_factor_conv(self, index)

    def __init__(self):
        this = _read_tree.new_halotree()
        try:
            self.this.append(this)
        except:
            self.this = this
    __swig_destroy__ = _read_tree.delete_halotree
    __del__ = lambda self: None
halotree_swigregister = _read_tree.halotree_swigregister
halotree_swigregister(halotree)

# This file is compatible with both classic and new-style classes.

cvar = _read_tree.cvar

class HaloList:
    def __init__(self, internal):
        self.internal = internal
        return

    def __getattr__(self, attr):
        if attr == 'halos':
            return [self.internal.get_halo(i) for i in range(self.internal.num_halos)]
        else:
            return self.internal.__getattr__(attr)

class HaloTree:
    def __init__(self, internal):
        self.internal = internal
        return

    def __getattr__(self, attr):
        if attr == 'halo_lists':
            return [HaloList(self.internal.get_halo_list(i)) for i in range(self.internal.num_lists)]
        elif attr == 'scale_factor_conv':
            return [self.internal.get_scale_factor_conv(i) for i in range(self.internal.num_scales)]
        else:
            return self.internal.__getattr__(attr)

all_halos = HaloList(cvar.all_halos)
halo_tree = HaloTree(cvar.halo_tree)

